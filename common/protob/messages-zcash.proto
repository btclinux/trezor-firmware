syntax = "proto2";
package hw.trezor.messages.zcash;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageZcash";

/**
 * Receiver typecodes for unified addresses.
 * see: https://zips.z.cash/zip-0316#encoding-of-unified-addresses
 */
enum ZcashReceiverTypecode {
  P2PKH = 0;
  P2SH = 1;
  SAPLING = 2;
  ORCHARD = 3;
}

/**
 * Type of Orchard Viewing Key.
 * see: https://zips.z.cash/zip-0032#key-path-levels
 */
enum ZcashViewingKeyScope {
    EXTERNAL = 0;  // for extenal operations like receiving funds from other users
    INTERNAL = 1;  // for internal operations like change transfers
}

/**
 * Types of MACs for Zcash messages.
 */
enum ZcashMACType {
  ORCHARD_INPUT = 0;
  ORCHARD_OUTPUT = 1;
  ORCHARD_ALPHA = 2;
}

/**
 * Request: Ask device for Orchard Full Viewing Key.
 * @start
 * @next Failure
 * @next ZcashFullViewingKey
 */
message ZcashGetFullViewingKey {
    optional string coin_name = 2 [default = "Zcash"];
    repeated uint32 z_address_n = 3; // z-address ZIP 32 path
}

/**
 * Response: Contains raw Orchard Full Viewing Key.
 * @end
 */
message ZcashFullViewingKey {
    required bytes fvk = 1;
}

/**
 * Request: Ask device for Orchard Incoming Viewing Key.
 * @start
 * @next Failure
 * @next ZcashIncomingViewingKey
 */
message ZcashGetIncomingViewingKey {
    optional string coin_name = 1 [default = "Zcash"];
    repeated uint32 z_address_n = 2; // z-address ZIP 32 path
}

/**
 * Response: Contains raw Orchard Incoming Viewing Key.
 * @end
 */
message ZcashIncomingViewingKey {
    required bytes ivk = 1;
}

/**
 * Request: Ask device for Unified Address.
 * @start
 * @next Failure
 * @next ZcashAddress
 */
message ZcashGetAddress {
    optional string coin_name = 1 [default = "Zcash"];
    repeated uint32 t_address_n = 2;                      // t-address BIP 32 path (P2PKH)
    repeated uint32 z_address_n = 3;                      // z-address ZIP 32 path (Orchard)
    optional uint64 diversifier_index = 4 [default = 0];  // z-address diversifier index
    optional bool   show_display = 5 [default = false];   // Optionally show on display before sending the result
}

/**
 * Response: Contains Zcash diversified payment address derived from device private seed
 * @end
 */
message ZcashAddress {
    optional string address = 1;
}

/**
 * Request: Specify tx output. Let the `address` field empty for change outputs.
 * @next TxRequest
 */
message ZcashOrchardOutput {
    optional string address = 1;  // for outgoing transfers
    required uint64 amount = 2;
    optional string memo = 3;     // an optional message for a recepient
}

message ZcashOrchardNote {
    required bytes recipient = 1;
    required uint64 value = 2;
    required bytes rho = 3;
    required bytes rseed = 4;
    //optional bytes nullifier = 5;
}

message ZcashOrchardInput {
    required ZcashOrchardNote note = 1;
}

/**
 * Request: Specify Orchard Action description.
 * @next TxRequest
 */
/*message ZcashActionDescription {
    required bytes nf = 1;     // nullifier of spent Note
    required bytes cv = 2;     // value commitment
    required bytes rk = 3;     // verification key
    required ZcashOrchardOutput output = 4;  // Action output info
    optional bytes output_mac = 5;
    optional uint32 output_index = 6;
    required bytes rseed = 7;  // rseed for an outcomming Note
    required bytes rho = 8;    // rho for the outcoming Note
    optional bytes c_out = 9;  // c_out for the outcoming dummy Note
}*/

message ZcashOrchardAction {
    required bytes cv = 1;
    required bytes nf = 2;
    required bytes rk = 3;
    required bytes cmx = 4;
    required bytes epk = 5;
    required bytes enc_ciphertext = 6;
    required bytes out_ciphertext = 7;
}

message ZcashOrchardProofWitness {
  optional bytes path = 1;  // from Note witness
  optional uint32 pos = 2;  // from Note witness
  required bytes g_d_old = 3;  // from Note
  required bytes pk_d_old = 4;  // from Note
  required uint64 v_old = 5;  //  from Note
  required bytes rho_old = 6;  //from Note
  required bytes psi_old = 7;  // from Note
  required bytes rcm_old = 8;  // derivable
  required bytes cm_old = 9;  // derivable
  required bytes alpha = 10;
  required bytes ak = 11;  // from fvk
  required bytes nk = 12;  // from fvk
  required bytes rivk = 13;  // from fvk
  required bytes g_d_new = 14;   // from output
  required bytes pk_d_new = 15;  // from output
  required uint64 v_new = 16;  // from output
  required bytes psi_new = 17;
  required bytes rcm_new = 18;
  required bytes rcv = 19;

  required uint32 input_index = 20;
  required uint32 output_index = 21;
}

/**
 * Request: Specify alpha to randomize signing keys.
 * @next TxRequest
 */
message ZcashSignOrchard {
    required bytes alpha = 1;
}
